// ai.js
const OpenAI = require('openai');

const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// ---------- helpers de formata√ß√£o ----------
function asMenu(triggers = []) {
  const gatilhosVisiveis = triggers.filter(t => t.startsWith('/'));
  return [
    'üìã *Menu r√°pido*',
    '‚Äî Use @bot ou um dos comandos abaixo no grupo.',
    '',
    `‚Ä¢ */status* ‚Äî vis√£o geral do projeto (mock)`,
    `‚Ä¢ */tarefas* ‚Äî tarefas do dia (mock)`,
    `‚Ä¢ */hoje* ‚Äî lembretes do dia (mock)`,
    `‚Ä¢ */ajuda* ‚Äî este menu`,
    '',
    gatilhosVisiveis.length
      ? `Gatilhos ativos: ${gatilhosVisiveis.join(', ')}`
      : ''
  ].join('\n');
}

function mockStatus() {
  return [
    'üìä *Status (mock)*',
    'Projeto: _Pendente de vincula√ß√£o √† planilha_',
    'Fase atual: Descoberta/Assessment',
    'Entregas foco: mapeamento de dados, entrevistas, quick wins',
    'Riscos: defini√ß√£o de fontes de dados e acesso a sistemas',
    'Pr√≥ximos passos: validar planilha fonte, conectar Sheets ao bot',
  ].join('\n');
}

function mockTarefas() {
  return [
    'üóìÔ∏è *Tarefas de hoje (mock)*',
    '‚Ä¢ Rafael ‚Äî Consolidar checklist de documentos (P)',
    '‚Ä¢ Sueli ‚Äî Validar agenda de entrevistas (M)',
    '‚Ä¢ Paulo ‚Äî Criar planilha base do projeto no GDrive (A)',
    '_Obs.: assim que conectarmos √† planilha, estes dados vir√£o de fonte real._',
  ].join('\n');
}

function mockHoje() {
  return [
    '‚è∞ *Lembretes de hoje (mock)*',
    '‚Ä¢ 10:00 ‚Äî Checagem de pend√™ncias do checklist',
    '‚Ä¢ 16:30 ‚Äî Alinhamento r√°pido com time comercial',
    '_Quando a planilha estiver conectada, hor√°rios e itens vir√£o dela._',
  ].join('\n');
}

// ---------- system prompt ----------
function buildSystem(isGroup, botName) {
  // Contexto institucional m√≠nimo ‚Äî enxuto, sem ‚Äúpalestra‚Äù
  const brynix = [
    'Voc√™ √© o Assistente BRYNIX.',
    'Miss√£o: acelerar resultados com IA pr√°tica para PMEs, com foco em efici√™ncia gerencial, automa√ß√£o e gera√ß√£o de receita.',
    'Estilo: executivo, claro, cordial; objetivo por padr√£o; use bom humor leve quando adequado.',
  ].join(' ');

  const regrasGrupo = [
    'No *grupo*: seja breve e pr√°tico.',
    'S√≥ responda se acionado por men√ß√£o (@) ou comando (/), pois a orquestra√ß√£o j√° filtra.',
    'Mantenha o foco no projeto; se a pergunta fugir do escopo, responda rapidamente e convide a usar `/ajuda` para op√ß√µes.',
  ].join(' ');

  const regrasPrivado = [
    'No *1:1*: pode expandir um pouco, ainda assim seja objetivo.',
  ].join(' ');

  const limites = [
    'Se n√£o souber, diga o que precisa para responder.',
    'Evite inventar nomes de pessoas, projetos ou n√∫meros.',
  ].join(' ');

  return [
    `Nome do bot: ${botName || 'Brynix Bot'}.`,
    brynix,
    isGroup ? regrasGrupo : regrasPrivado,
    limites,
  ].join('\n');
}

// ---------- tratadores de comandos (/...) ----------
async function handleSlashCommand(text, ctx) {
  const cmd = text.trim().split(/\s+/)[0].toLowerCase();

  switch (cmd) {
    case '/ajuda':
      return asMenu(ctx.triggers || []);
    case '/status':
      return mockStatus();
    case '/tarefas':
      return mockTarefas();
    case '/hoje':
      return mockHoje();
    default:
      // volta um help r√°pido
      return `Comando n√£o reconhecido. Use */ajuda* para ver op√ß√µes.`;
  }
}

// ---------- gera√ß√£o principal ----------
async function generateReply(userText, ctx = {}) {
  try {
    const { isGroup, botName, triggers } = ctx;
    const text = (userText || '').trim();

    // comandos t√™m prioridade
    if (text.startsWith('/')) {
      return await handleSlashCommand(text, { isGroup, botName, triggers });
    }

    const system = buildSystem(!!isGroup, botName);

    const messages = [
      { role: 'system', content: system },
      {
        role: 'user',
        content: [
          `Contexto: ${isGroup ? 'grupo de projeto' : 'conversa 1:1'}.`,
          'Se a pergunta for fora de escopo em grupo, responda curto e convide a usar /ajuda.',
          `Gatilhos dispon√≠veis: ${(triggers || []).join(', ') || '(nenhum informado)'}.`,
          '',
          `Pergunta: "${text}"`,
        ].join('\n')
      }
    ];

    const resp = await client.chat.completions.create({
      model: process.env.OPENAI_MODEL || 'gpt-4o-mini',
      temperature: isGroup ? 0.4 : 0.5,
      max_tokens: isGroup ? 220 : 320,
      messages,
    });

    let out = (resp.choices?.[0]?.message?.content || '').trim();

    // Em grupo, garanta concis√£o
    if (isGroup) {
      // Se a resposta ficou muito longa, d√° uma vers√£o resumida
      if (out.length > 600) {
        out = out.slice(0, 580) + '‚Ä¶';
      }
    }

    return out || 'Ok.';
  } catch (err) {
    console.error('[AI] Erro generateReply:', err);
    return 'Tive um problema t√©cnico agora. Pode repetir em poucas palavras?';
  }
}

module.exports = { generateReply };
